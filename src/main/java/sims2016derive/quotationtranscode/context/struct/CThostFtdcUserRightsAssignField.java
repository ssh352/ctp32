package sims2016derive.quotationtranscode.context.struct;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Array;
import org.bridj.ann.Field;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */

public class CThostFtdcUserRightsAssignField extends StructObject {
	public CThostFtdcUserRightsAssignField() {
		super();
	}

	/**
	 * \u5e94\u7528\u5355\u5143\u4ee3\u7801
	 */
	@Array({11}) 
	@Field(0) 
	private Pointer<Byte> BrokerID() {
		return this.io.getPointerField(this, 0);
	}

	@Array({11})
	@Field(0)
	public void setBrokerID(String brokerID) {
		this.io.getPointerField(this, 0).setCString(brokerID);
	}

	public String getBrokerID() {
		return BrokerID().getCString();
	}

	/**
	 * \u7528\u6237\u4ee3\u7801
	 */
	@Array({16}) 
	@Field(1) 
	private Pointer<Byte> UserID() {
		return this.io.getPointerField(this, 1);
	}

	@Array({16})
	@Field(1)
	public void setUserID(String userID) {
		this.io.getPointerField(this, 1).setCString(userID);
	}

	public String getUserID() {
		return UserID().getCString();
	}

	/**
	 * \u4ea4\u6613\u4e2d\u5fc3\u4ee3\u7801
	 */
	@Field(2) 
	private int DRIdentityID() {
		return this.io.getIntField(this, 2);
	}

	public int getDRIdentityID() {
		return DRIdentityID();
	}

	/**
	 * \u4ea4\u6613\u4e2d\u5fc3\u4ee3\u7801
	 */
	@Field(2) 
	private CThostFtdcUserRightsAssignField DRIdentityID(int DRIdentityID) {
		this.io.setIntField(this, 2, DRIdentityID);
		return this;
	}

	public void setDRIdentityID(int dRIdentityID) {
		DRIdentityID(dRIdentityID);
	}

	public CThostFtdcUserRightsAssignField(Pointer pointer) {
		super(pointer);
	}

}

